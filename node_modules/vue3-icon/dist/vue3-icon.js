import { h as n, computed as t } from "vue";
const y = {
  transform: "rotate(var(--r, 0deg)) scale(var(--sx, 1), var(--sy, 1))"
}, o = {
  mdi: {
    size: 24,
    viewbox: "0 0 24 24"
  },
  "simple-icons": {
    size: 24,
    viewbox: "0 0 24 24"
  },
  default: {
    size: 0,
    viewbox: "0 0 0 0"
  }
}, v = {
  props: {
    type: {
      type: String,
      required: !0
    },
    path: {
      type: [String, Object, Array],
      required: !1
    },
    pathString: {
      type: [Array, String, Object],
      required: !1
    }
  },
  setup(e) {
    return () => e.type === "fad" ? (console.warn("vue3-icon does not currently support Duotone FontAwesome icons"), n("path")) : Array.isArray(e.path) ? n(
      "g",
      {
        style: {
          fill: "currentcolor"
        }
      },
      e.path.map((a) => typeof a == "string" ? n("path", { d: a }) : n("path", { ...a }))
    ) : n("path", {
      d: e.pathString,
      style: {
        fill: "currentcolor"
      }
    });
  }
}, g = {
  name: "icon",
  props: {
    /**
     * The icon type, e.g. mdi or simple-icons
     */
    type: {
      type: String,
      default: "mdi"
    },
    /**
     * The FontAwesome icon object
     */
    faIcon: {
      type: Object,
      default: null
    },
    /**
     * The svg path for the icon
     */
    path: {
      type: [String, Object, Array]
    },
    /**
     * The size of the icon when rendered in the browser
     */
    size: {
      type: [Number, String],
      default: 24
    },
    /**
     * The SVG viewbox, affects path position, but not render size
     */
    viewbox: {
      type: String,
      required: !1
    },
    /**
     * Flip the icon either horizontally, vertically, or both
     */
    flip: {
      type: String,
      default: "",
      validator: (e) => ["", "horizontal", "vertical", "both"].includes(e)
    },
    /**
     * Rotate the icon
     */
    rotate: {
      type: [Number, String],
      default: 0
    },
    /**
     * Don't add the XML namespace attribute
     */
    noNamespace: {
      type: Boolean,
      default: !1
    },
    /**
     * Don't add any styles to SVG, disables flip and rotate
     */
    noStyles: {
      type: Boolean,
      default: !1
    },
    /**
     * Don't add the width/height attributes to the SVG element
     */
    noDimensions: {
      type: Boolean,
      default: !1
    }
  },
  setup(e) {
    if (!e.path && !e.faIcon)
      return console.warn("vue3-icon requires either a 'path' or an 'fa-icon' property"), () => n("div");
    const a = t(() => {
      var i;
      return ((i = e.faIcon) == null ? void 0 : i.prefix) || e.type;
    }), r = t(() => parseInt(e.rotate, 10)), l = t(() => o[a.value] || o.default), u = t(() => parseInt(e.size, 10) || l.value.size), s = t(() => e.faIcon ? `0 0 ${e.faIcon.icon[0]} ${e.faIcon.icon[1]}` : !1), c = t(() => s.value || e.viewbox || l.value.viewbox), f = t(() => {
      if (e.noStyles !== !0)
        return {
          ...y,
          "--sx": ["both", "horizontal"].includes(e.flip) ? "-1" : "1",
          "--sy": ["both", "vertical"].includes(e.flip) ? "-1" : "1",
          "--r": isNaN(r.value) ? r.value : r.value + "deg"
        };
    }), d = t(() => {
      var i;
      return e.faIcon ? (i = e.faIcon) == null ? void 0 : i.icon[4] : e.type === "simple-icons" && typeof e.path == "object" ? e.path.path : e.path;
    });
    return () => n(
      "svg",
      {
        xmlns: e.noNamespace !== !0 ? "http://www.w3.org/2000/svg" : void 0,
        style: f.value,
        class: ["vue3-icon"],
        width: e.noDimensions !== !0 ? u.value : void 0,
        height: e.noDimensions !== !0 ? u.value : void 0,
        viewBox: c.value
      },
      [n(v, { path: e.path, type: a.value, pathString: d.value })]
    );
  }
};
export {
  g as default
};
